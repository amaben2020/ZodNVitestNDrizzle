 Notes:
 iLike ensures that the database query is case insensitive

 const results = await db.query.users
 .findMany({
 limit,
 offset,
 where: or(
 ilike(users.jobTitle, q),
 ilike(users.name, q),
 ilike(users.firstName, q),
 ilike(users.lastName, q),
 ilike(users.email, q)
 ),
 })
 .execute();

similarity ranges from 0.1 - 0.9 based on the threshold required
after installing pgtrgm which gives us similarity function
1.
select * from "user" where similarity(first_name, 'Ophelia_Okuneva') > 0.2;
2.
SELECT
    email
FROM
     "user"
3. putting user in quotes because its reserved in  postgres
SELECT
  "user".job_title, "user".email, "user".first_name
FROM
  "user"
ORDER BY "user".first_name DESC

4.
INSERT INTO "order"("item_name","customer_id")
VALUES ('iPhone 15pro max', '1');
5. Join
SELECT first_name, last_name, email
	 FROM customer
	LEFT JOIN "order"
	ON customer.id = "order".customer_id

  6.
  -- Drop existing tables
DROP TABLE IF EXISTS "order";
DROP TABLE IF EXISTS "customer";

-- Recreate the tables
CREATE TABLE customer (
  id SERIAL PRIMARY KEY,
  first_name TEXT,
  last_name TEXT,
  email TEXT NOT NULL UNIQUE
);

CREATE TABLE "order" (
  id SERIAL PRIMARY KEY,
  item_name TEXT,
  customer_id INTEGER NOT NULL REFERENCES customer(id)
);

7. Explicit Joins
SELECT customer.first_name, customer.last_name, customer.email, "order".item_name
FROM customer
LEFT JOIN "order" ON customer.id = CAST("order".customer_id AS INTEGER);
